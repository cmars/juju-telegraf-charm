{%- macro render_options(name, kind, options) %}
  {%- if options[name] %}
  {%- for key, value in options[name]|dictsort %}
  {%- if key != 'tagpass' and key != 'tagdrop' %}
  {{ key }} = {{ value }}
  {%- endif %}
  {%- endfor %}
  {%- for key, value in options[name].items() %}
  {%- if key == 'tagpass' or key == 'tagdrop' %}
  [{{ kind }}.{{ name }}.{{ key }}]
    {%- for tag, tagvalue in value.items() %}
    {{ tag }} = {{ tagvalue }}
    {%- endfor %}
  {%- endif %}
  {%- endfor %}
  {%- endif %}
{%- endmacro %}
# This file is managed by Juju. Do not make local changes.

# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
{% for tag in tags %}
  {{ tag }}
{% endfor %}

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all plugins
  interval = "{{ interval }}"
  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = {% if round_interval %}true{% else %}false{% endif %}

  # Telegraf will cache metric_buffer_limit metrics for each output, and will
  # flush this buffer on a successful write.
  metric_buffer_limit = {{ metric_buffer_limit }} 

  # Collection jitter is used to jitter the collection by a random amount.
  # Each plugin will sleep for a random time within jitter before collecting.
  # This can be used to avoid many plugins querying things like sysfs at the
  # same time, which can have a measurable effect on the system.
  collection_jitter = "{{ collection_jitter }}"

  # Default data flushing interval for all outputs. You should not set this below
  # interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "{{ flush_interval }}"
  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "{{ flush_jitter }}"

  # Run telegraf in debug mode
  debug = {% if debug %}true{% else %}false{% endif %} 
  # Run telegraf in quiet mode
  quiet = {% if quiet %}true{% else %}false{% endif %} 
  # Override default hostname, if empty use os.Hostname()
  hostname = "{{ hostname }}"


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

{{ outputs }}

{% if prometheus_output_port %}
[[outputs.prometheus_client]]
  listen = ":{{ prometheus_output_port }}"
  {%- if extra_options['outputs']['prometheus_client'] %}{{ render_options('prometheus_client', 'outputs', extra_options['outputs']) }}{%- endif %}
{%- endif %}

###############################################################################
#                                  INPUTS                                     #
###############################################################################

{{ inputs }}

###############################################################################
#                              SERVICE INPUTS                                 #
###############################################################################

# see /etc/telegraf/telegraf.d/*.conf
